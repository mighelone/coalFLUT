runTime
{
    startTime		  0.0;
    endTime			  END_TIME;
    writeInterval	  END_TIME; // modify, when transient solution is of interest
    timePrecision	  1;
}

solution
{
    requiredFields( chi, LeZ, Ysum);
    additionalUpdateFunction
    {
        eqID UPDATE_EQN;
    }
    solutionEntries
    {
        T
        {
            eqID        T_EQN;
            eqType      ode;
            eqParameters 
            {
                // only relevant for flamelet models ...HMF
                ZMin ZMIN;
                ZMax ZMAX;
            }
            minValue    250.0;
            maxValue    3000.0;
            boundaryConditions 
            {
                T_oxid_bc
                {
                    patchList (oxidizer);
                    eqID    BOUNDARY_EQN;
                    eqType  BOUNDARY_TYPE;
                    eqParameters // only relevant for fixedValue_newton
                    {
                        value T_OXID;
                    }
                }
                T_fuel_bc
                {
                    patchList (fuel);
                    eqID    BOUNDARY_EQN;
                    eqType  BOUNDARY_TYPE;
                    eqParameters // only relevant for fixedValue_newton
                    {
                        value T_FUEL;
                    }
                }
            }
        }
        Yi
        {
            eqID        Y_EQN;
            eqType      ode;
            eqParameters 
            {
                // only relevant for flamelet models ...HMF
                ZMin ZMIN;
                ZMax ZMAX;
            }
            minValue    0.0;
            maxValue    1.0;
            boundaryConditions 
            {
                Y_oxid_bc
                {
                    patchList (oxidizer);
                    eqID    BOUNDARY_EQN;
                    eqType  BOUNDARY_TYPE;
                    eqParameters // only relevant for fixedValue_newton
                    {
                        value
                        {
                            default 0.0;   
                            SPEC1   Y1_OXID; 
                            SPEC2   Y2_OXID;
                            SPEC3   Y3_OXID;
                            SPEC4   Y4_OXID;
                            SPEC5   Y5_OXID;
                            SPEC6   Y6_OXID;
                        }
                    }
                }
                Y_fuel_bc
                {
                    patchList (fuel);
                    eqID    BOUNDARY_EQN;
                    eqType  BOUNDARY_TYPE;
                    eqParameters // only relevant for fixedValue_newton
                    {
                        value
                        {
                            default 0.0;   
                            SPEC1   Y1_FUEL; 
                            SPEC2   Y2_FUEL;
                            SPEC3   Y3_FUEL;
                            SPEC4   Y4_FUEL;
                            SPEC5   Y5_FUEL;
                            SPEC6   Y6_FUEL;
                        }
                    }
                }
            }
        }
    }
}

preProcessing
{
    eqID        flamelet_startprofile;
	mixtureType CANTERA_MIXTURE;
    mechanism   MECHANISM;
    pressure    PRESSURE;
    profileType STARTPROFILE;
    fuel
    {
        T       T_FUEL;
        SPEC1   Y1_FUEL; 
        SPEC2   Y2_FUEL;
        SPEC3   Y3_FUEL;
        SPEC4   Y4_FUEL;
        SPEC5   Y5_FUEL;
        SPEC6   Y6_FUEL;
    }
    oxidizer
    {
        T       T_OXID;
        SPEC1   Y1_OXID; 
        SPEC2   Y2_OXID;
        SPEC3   Y3_OXID;
        SPEC4   Y4_OXID;
        SPEC5   Y5_OXID;
        SPEC6   Y6_OXID;
    }
}

solver
{
    solverType SOLVER_TYPE;
    absTol ABS_TOL;
    relTol REL_TOL;
    maxSteps 1000000;
    maxOrder 5;
    maxJacStationaryAge 10;
    maxJacTransientAge 10;
    //jacobianType band; // [blockTriDiagonal (def) | band] 
    convergenceCriterion maxBased; // [averageBased (def) | maxBased | local]
    nTimeSteps 10;
    dtMax 1.0e-1;
    dtMin 1.0e-12;
    maxDampSteps 6;
    dampFactor 2.0;
    logLevel 1;
}

libs( "libequations" );

resultFileBaseName RESULT_BASENAME;
resultType ASCII;

restart RESTART_OPTION;
restartFile RESTART_FILE;
restartType ASCII;

mesh
{
	dimensions 1;
	constructionFrom cartesianLimits;
	axisNames( Z );
	axisLength( AXIS_LENGTH );
	cartesianMin( 0 );
	cartesianMax( 1 );
    patches
    {
        oxidizer
        {
            patchMin ( 0 );
            patchMax ( 0 );
        }
        fuel
        {
            patchMin ( 1 );
            patchMax ( 1 );
			patchNormal( -1 );
        }
    }
    //initialMeshAdaption
    //{
    //    eqID remeshing;
    //    Z
    //    {
    //        weights
    //        {
    //            eqID flameletWeight;
    //            eqParameters
    //            {
    //                Zst REFINE_POSITION;
    //                width REFINE_WIDTH;
    //            }
    //        }
    //        reMesh
    //        {
    //            eqID redistribute;
    //        }
    //        additionalPoints 0;
    //    }
    //}
	meshAdaption 
    {
        eqID remeshing;
        Z
        {
            weights
            {
                eqID refineWeightSolution;
                reMeshRatio 0.9;
            }
            reMesh
            {
                eqID refine;
            }
		    additionalPoints REFINE_ADD_POINT;
			refinementTarget REFINE_TARGET;
        }
    }
}

mixture
{
    mainMixture MAIN_MIXTURE;
    generalMix
    {
        mixtureType     MIXTURE_TYPE;
        mechanism       MECHANISM;
        // this is equivalent for all mixtures > case specific
        #include        "flamelet_mixtureEntries.ulf"; 
    }
}

fields
{
	default
	{
		referenceFrame cellCentered;
		interpolate YES;
		frozen NO;
		write NO;
		fixedValue 0.0;
		firstOrder CDS;
		secondOrder CDS;
		diffusive NONE;
	}
    CHI_FROM_ERFC
    {
        eqID erfc_startProfile;
        eqParameters
        {
            Zst ZST;
            chiSt CHIST; 
        }
		frozen YES;
        write YES;
    }
    CHI_FROM_FILE
    {
        readFrom CHI_FILE;
        readType ASCII;
		frozen YES;
        write YES;
    }
	T
	{
		firstOrder UDS;
        write YES;
        fixedValue 300;
	}
    YiDefault
    {
		firstOrder UDS;
        write YES;
    }
    reactionRateiDefault
    {
		firstOrder UDS;
        write YES;
    }
    rho
	{
        write YES;
	}
	p
	{
		fixedValue PRESSURE;
        write YES;
	}
	hMean
	{
        write YES;
	}
	LeZ
	{
        //write YES;
        // default value 1.0, overwritten if LEWIS_UPDATE_TYPE set to standard
        fixedValue 1.0; 
	}
	LeiDefault
	{
        //write YES;
        // default value 1.0, overwritten if LEWIS_UPDATE_TYPE set to standard
        fixedValue 1.0; 
	}
    //#include LEWIS_NUMBER_FILE;
}
